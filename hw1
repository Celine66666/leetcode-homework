class Solution: ##by initialize the empty set seen and only iterate once to get ##answer
    def containsDuplicate(self, nums: List[int]) -> bool:
        seen = set()
        for num in nums:
            if num in seen:
                return True
            seen.add(num)
        return False

class Solution:
    def maxArea(self, height: List[int]) -> int:
        l = 0
        r = len(height) -1
        area = 0
     
        while l < r:

          area = max(area, min(height[l], height[r]) * (r - l))
     
          if height[l] < height[r]:
            l += 1
          else:
            r -= 1
        return area

class Solution:
    def maxSlidingWindow(self, nums: List[int], k) -> List[int]:
        output=[]
        dq = deque()
        l = r = 0
        while r < len(nums):
            while dq and nums[dq[-1]] < nums[r]:
                dq.pop()
            dq. append(r)
            if l > dq[0]:
                dq.popleft()
            if (r+1) >= k:
                output.append(nums[dq[0]])
                l += 1
            r += 1
        return output   
